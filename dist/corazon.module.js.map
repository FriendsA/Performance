{"version":3,"file":"corazon.module.js","sources":["../src/types/index.ts","../src/constant/index.ts","../src/data/ReportData.ts","../src/tools/index.ts","../src/data/ErrorTrack.ts","../src/data/performance.ts","../src/data/Corazon.ts"],"sourcesContent":["import ReportData from \"../data/ReportData\";\n\n/**\n * options 配置对象\n */\nexport interface PerformanceConfig {\n    logUrl: string; // 上报地址\n    analyticsTracker?: (data: IAnalyticsTrackerOptions) => void; // 自定义报告指标的方法\n    isResourceTiming?: boolean; // 是否追踪资源加载数据\n    captureError?: boolean; // 是否开启错误跟踪\n    isPerformance?: boolean; // 是否开启性能指标监控\n}\n\nexport interface PerformanceStore {\n    reportData: ReportData | null,\n    isPerformance?: boolean; // 是否开启性能指标监控\n    analyticsTracker?: (data: IAnalyticsTrackerOptions) => void; //追踪可以执行的方法\n    isResourceTiming?: boolean; // 是否追踪资源加载数据\n    captureError?: boolean; // 是否开启错误跟踪\n}\n\n/**\n * 优先级\n */\nexport enum Priority {\n    URGENT = 2,\n    IDLE = 1,\n}\n\nexport interface IReportData {\n    sendToAnalytics(level: Priority, body: string): void,\n}\n\n/**\n * 性能指标参数\n */\nexport type IPerformanceObserverType = 'first-input' | 'largest-contentful-paint' | 'layout-shift' | 'longtask' | 'measure' | 'navigation' | 'paint' | 'element' | 'resource' | 'longtask';\n\n\nexport enum ObserveType {\n    PAINT = 'paint',\n    FIRST_INPUT = 'first-input',\n    LARGEST_CONTENTFUL_PAINT = 'largest-contentful-paint',\n    RESOURCE = 'resource',\n    LONGTASK = 'longtask',\n    LAYOUT_SHIFT = 'layout-shift',\n    ELEMENT = 'element',\n\n    FIRST_PAINT = 'first-paint',\n    FIRST_CONTENTFUL_PAINT = 'first-contentful-paint',\n}\n\nexport interface INavigatorInfo {\n    deviceMemory?: number;\n    hardwareConcurrency?: number;\n    isLowEndDevice?: boolean;\n    isLowEndExperience?: boolean;\n    serviceWorkerStatus?: 'controlled' | 'supported' | 'unsupported';\n}\n\nexport type IVitalsScore = 'good' | 'needsImprovement' | 'poor' | null;\n\nexport interface IAnalyticsTrackerOptions {\n    measureName: string;\n    data: any;  // TODO\n    navigatorInformation: INavigatorInfo,\n    vitalsScore: IVitalsScore,\n}\n\nexport interface PerformanceEventTiming extends PerformanceEntry {\n    processingStart: DOMHighResTimeStamp;\n    processingEnd: DOMHighResTimeStamp;\n    target?: Node;\n}\n\nexport interface LargestContentfulPaint extends PerformanceEntry {\n    renderTime: DOMHighResTimeStamp;\n}\n\nexport interface CumulativeLayoutShift extends PerformanceEntry {\n    hadRecentInput: boolean;\n    value: number;\n}","import { PerformanceStore } from \"../types\";\n\nexport const W = window;\nexport const D = document;\nexport const WP = window.performance;\nexport const WN = window.navigator;\n\n// 全局的参数数据\nexport const store: PerformanceStore = {\n    reportData: null,\n    isResourceTiming: false,\n    captureError: false,\n    isPerformance: false,\n}\n\n// 标签栏是否隐藏\nexport const visible = {\n    isHidden: false,\n}\n\n// 全局的指标数据\nexport const RData = {\n    FP: 0, // First Paint\n    FCP: 0, // First Contentful Paint\n    FID: 0, // First input delay\n    LCP: 0, \n    CLS: 0,\n    TBT:0, // Total Block Time\n    RD: Object.create(null),// resouce data\n}","import { IReportData, Priority } from \"../types\";\nimport { WN } from '../constant/index';\n\nclass ReportData implements IReportData {\n    private reportUrl: string;\n    constructor(url: string) {\n        if (!url) {\n            throw new Error(\"上报地址不能为空\");\n        }\n        this.reportUrl = url;\n    }\n\n    sendToAnalytics(level: Priority, body: string) {\n        if (level === Priority.URGENT) {\n            if (!!fetch) {\n                fetch(this.reportUrl, { body, method: 'POST', keepalive: true }).catch(reason=>{\n                    // 上报出错\n                });\n            } else {\n                let xhr: XMLHttpRequest | null = new XMLHttpRequest();\n                xhr.open('POST', this.reportUrl, true);\n                xhr.setRequestHeader('Content-Type', 'application/json');\n                xhr.send(body);\n                xhr.onerror = function (e) {\n                    // 上报出错\n                }\n                xhr = null;\n            }\n        } else if (level === Priority.IDLE) {\n            if (!!WN.sendBeacon) {\n                WN.sendBeacon(this.reportUrl, body);\n            } else {\n                let img: HTMLImageElement | null = new Image();\n                img.src = `${this.reportUrl}?body=${body}`;\n                img.onload = function () {\n                    img = null;\n                }\n                img.onerror = function (e) {\n                    // 上报出错\n                }\n            }\n        }\n    }\n}\n\nexport default ReportData;","import { PerformanceConfig, ObserveType, INavigatorInfo, IVitalsScore } from \"../types\";\nimport ReportData from \"../data/ReportData\";\nimport { WP, W, WN, store, visible } from '../constant/index';\n\nexport const validateOptions = (options: PerformanceConfig) => {\n    if (!options.logUrl) {\n        throw new Error(\"上报地址未填写\");\n    }\n\n    store.reportData = new ReportData(options.logUrl);\n\n    if (options.analyticsTracker && typeof options.analyticsTracker !== \"function\") {\n        throw new Error(\"跟踪方法有误\");\n    }\n\n    if (!options.analyticsTracker) {\n        // TODO: 参数类型补充\n        store.analyticsTracker = function (options: unknown) {\n            console.log(options);\n        }\n    } else {\n        store.analyticsTracker = options.analyticsTracker;\n    }\n\n    store.isResourceTiming = options.isResourceTiming || false;\n    store.isResourceTiming = options.isPerformance || false;\n    store.captureError = options.captureError || false;\n}\n\nexport const isPerformanceSupporte = () => {\n    return WP && !!WP.getEntriesByType && !!WP.now && !!WP.mark;\n}\n\n// 是否支持 PerformanceObserver\nexport const isPerformanceObserverSupporte = () => {\n    return W && !!W.PerformanceObserver\n}\n\n/**  \n * 尝试使用requestIdleCallback\n */\nconst useIdleHandle = (fn: () => any) => {\n    if (W && Reflect.has(W, \"requestidlecallback\")) {\n        requestIdleCallback(fn, { timeout: 3000 })\n    } else {\n        fn();\n    }\n}\n\n/**\n * 自定义方法处理指标结论\n * @param duration 指标时间\n * @param measureName 指标名称\n */\nexport const LogConsole = (duration: number, measureName: string, customProperties?: object) => {\n    duration = parseFloat(duration.toFixed(2));\n    if (duration >= 0) {\n        useIdleHandle(() => {\n            if (visible.isHidden && !measureName.endsWith(\"Final\") || !store.analyticsTracker) {\n                return;\n            }\n            store.analyticsTracker({ measureName, data: duration, navigatorInformation: getNavigatorInfo(), vitalsScore: getVitalsScore(measureName, duration) });\n        })\n    }\n}\n\nexport const LogObjectData = (measureName: string, customProperties?: object) => {\n    useIdleHandle(() => {\n        if (visible.isHidden && !measureName.endsWith(\"Final\") || !store.analyticsTracker) {\n            return;\n        }\n        store.analyticsTracker({ measureName, data: customProperties, navigatorInformation: getNavigatorInfo(), vitalsScore: null });\n    })\n}\n\n/**\n * 内存多大\n */\nconst getDM = () => (WN as any)?.deviceMemory ?? 0;\n/**\n * 处理器多少核\n */\nconst getHC = () => (WN as any)?.hardwareConcurrency ?? 0;\n\n/**\n * 是否为低性能设备\n */\nconst getIsLowEndDevice = () => {\n    if (getHC() && getHC() < 4) {\n        return true;\n    }\n    if (getDM() && getDM() < 4) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * 网速是否差\n */\nconst getIsLowEndExperience = () => {\n    let net = WN && (WN as any)?.connection?.effectiveType;\n    return net ? net !== \"4g\" : false;\n}\n\nconst getNavigatorInfo = (): INavigatorInfo => {\n    if (WN) {\n        return {\n            deviceMemory: getHC(),\n            hardwareConcurrency: getDM(),\n            isLowEndDevice: getIsLowEndDevice(),\n            isLowEndExperience: getIsLowEndExperience(),\n        }\n    }\n    return {};\n}\n\n// chorme 指标分数\nconst fcpScore = [1000, 2500];\nconst lcpScore = [2500, 4000];\nconst fidcore = [100, 300];\nconst clsScore = [0.1, 0.25];\nconst tbtScore = [300, 600];\n\nconst webVitalsScore: Record<string, number[]> = {\n    FP: fcpScore,\n    FCP: fcpScore,\n    LCP: lcpScore,\n    FID: fidcore,\n    CLS: clsScore,\n    TBT5S: tbtScore,\n};\n\nconst getVitalsScore = (measureName: string, value: number): IVitalsScore => {\n    if (!webVitalsScore[measureName]) {\n        return null;\n    }\n    if (value <= webVitalsScore[measureName][0]) {\n        return \"good\";\n    }\n    return value >= webVitalsScore[measureName][1] ? \"poor\" : \"needsImprovement\";\n}\n\nconst afterLoad = (callback: () => void) => {\n    if (document.readyState === 'complete') {\n        setTimeout(callback, 0);\n    } else {\n        addEventListener('pageshow', callback);\n    }\n}\n\nexport const getNavigationTiming = () => {\n    if (!isPerformanceSupporte()) {\n        return;\n    }\n\n    afterLoad(() => {\n        let pnt = WP.getEntriesByType(\"navigation\")[0] as PerformanceNavigationTiming;\n        if (!pnt) {\n            return;\n        }\n        let data = {\n            requestTotalTime: pnt.responseEnd - pnt.requestStart,\n            downloadTime: pnt.responseEnd - pnt.responseStart,\n            timeToFirstByte: pnt.responseStart - pnt.startTime || 0,\n            dnsLookupTime: pnt.domainLookupEnd - pnt.domainLookupStart,\n            tcpTime: pnt.connectEnd - pnt.connectStart,\n            domTime: pnt.domContentLoadedEventEnd - pnt.domContentLoadedEventStart,\n            loadTime: pnt.loadEventEnd - pnt.startTime || 0,\n            parseDOMTime: pnt.domComplete - pnt.domInteractive || 0,\n        }\n        LogObjectData(\"Navigation指标\", data);\n    })\n}\n\nexport const getNetworkInformation = () => {\n    if (WN && Reflect.has(WN, 'connection')) {\n        let { effectiveType, rtt, saveData, downlink } = (WN as any)['connection'];\n        LogObjectData(\"网络信息\", { effectiveType, rtt, saveData, downlink })\n    }\n}","import { W } from '../constant/index';\nimport { store } from '../constant/index';\nimport { Priority } from '../types/index';\n\nclass ErrorTrack {\n    constructor() {\n        // TODO 参数分类控制\n        if (!W || !W.addEventListener) {\n            throw new Error(\"不支持错误捕获!\");\n        }\n    }\n\n    private globalError() {\n        W.onerror = function (message: string | Event, source?: string, lineno?: number, colno?: number, error?: Error) {\n            let body = JSON.stringify({ message, source, lineno, colno })\n            store.reportData?.sendToAnalytics(Priority.IDLE, body);\n            return true;\n        }\n    }\n\n    private networkError() {\n        W.addEventListener(\"error\", function (e: ErrorEvent) {\n            if ((e.target as any) === W) {\n                return;\n            }\n            let ele = (e.target as HTMLImageElement | HTMLScriptElement);\n            let body = JSON.stringify({ url: ele.src, tag: ele.tagName, message: \"资源加载错误\" });\n            store.reportData?.sendToAnalytics(Priority.IDLE, body);\n        }, true)\n    }\n\n    private promiseError() {\n        W.addEventListener(\"unhandledrejection\", function (e: PromiseRejectionEvent) {\n            let body = JSON.stringify({ message: e.reason });\n            store.reportData?.sendToAnalytics(Priority.IDLE, body);\n        })\n    }\n\n    run() {\n        this.globalError();\n        this.networkError();\n        this.promiseError();\n    }\n}\n\nexport default ErrorTrack;","import { LogConsole, LogObjectData } from \"../tools\";\nimport { CumulativeLayoutShift, IPerformanceObserverType, LargestContentfulPaint, PerformanceEventTiming } from \"../types\";\nimport { ObserveType } from '../types/index';\nimport { RData, store } from '../constant/index';\n\nexport const performObserverList = Object.create(null);\n\nconst observeHandle = (eventType: IPerformanceObserverType, callback: (performanceEntries: any[]) => void): PerformanceObserver | null => {\n    try {\n        const perforObserver = new PerformanceObserver((entryList) => {\n            callback(entryList.getEntries());\n        })\n        // buffered: A flag to indicate whether buffered entries should be queued into observer's buffer.\n        perforObserver.observe({ type: eventType, buffered: true }); \n        return perforObserver;\n    } catch (e) {\n        // 报错\n        return e;\n    }\n}\n\nconst disObserveHandle = (index: number) => {\n    if (performObserverList[index]) {\n        performObserverList[index].disconnect();\n    }\n    Reflect.deleteProperty(performObserverList, index);\n}\n\nconst paintCallback = (performanceEntries: PerformanceEntry[]) => {\n    performanceEntries.forEach((p) => {\n        if (p.name === ObserveType.FIRST_PAINT) {\n            LogConsole(p.startTime, \"FP\");\n            RData.FP = p.startTime;\n        } else if (p.name === ObserveType.FIRST_CONTENTFUL_PAINT) {\n            LogConsole(p.startTime, \"FCP\");\n            RData.FCP = p.startTime;\n            // 监听长任务，计算阻塞时常\n            observeHandle(ObserveType.LONGTASK, longTastCallback);\n            disObserveHandle(0);\n        }\n    })\n}\n\nconst longTastCallback = (performanceEntries: PerformanceEntry[]) => {\n    performanceEntries.forEach(p => {\n        // 非本浏览器上下文或首绘内容之前的不统计 https://w3c.github.io/longtasks/\n        if (p.name !== \"self\" || p.startTime < RData.FCP) {\n            return;\n        }\n        let tbt = p.duration - 50;\n        if (tbt) {\n            RData.TBT += tbt;\n        }\n    })\n}\n\nconst firstInputCallback = (performanceEventTiming: PerformanceEventTiming[]) => {\n    let last = performanceEventTiming.pop();\n    if (last) {\n        LogConsole(last.processingStart - last.startTime, \"FID\");\n        RData.FID = last.processingStart - last.startTime;\n    }\n    disObserveHandle(1);\n    // 计算FID后5s的TBT\n    RData.TBT = 0;\n    setTimeout(() => {\n        LogConsole(RData.TBT, \"TBT5S\");\n    }, 5000);\n}\n\nconst lastContentfulPaintCallback = (entryList: LargestContentfulPaint[]) => {\n    let entry = entryList.pop();\n    if (entry) {\n        RData.LCP = entry.renderTime;\n        LogConsole(entry.renderTime, \"LCP\");\n    }\n}\n\nconst resourceCallback = (performanceResources: PerformanceResourceTiming[]) => {\n    let map = new Map();\n    let total = RData.RD;\n    performanceResources.forEach(r => {\n        total[r.name] = r;\n        if (map.has(r.initiatorType)) {\n            let n = map.get(r.initiatorType);\n            map.set(r.initiatorType, n + r.decodedBodySize);\n        } else {\n            map.set(r.initiatorType, r.decodedBodySize);\n        }\n    })\n    let once = Object.create(null);\n    for (let [key, value] of map) {\n        total[key] = value;\n        once[key] = value;\n    }\n    LogObjectData(\"Resource\", once)\n}\n\nlet clsValue = 0;\nlet clsEntries: CumulativeLayoutShift[] = [];\nlet sessionValue = 0;\nlet sessionEntries: CumulativeLayoutShift[] = [];\nconst layoutshiftCallback = (performanceEntries: CumulativeLayoutShift[]) => {\n    for (let p of performanceEntries) {\n        if (!p.hadRecentInput) {\n            const firstSessionEntry = sessionEntries[0];\n            const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n            if (sessionValue &&\n                p.startTime - lastSessionEntry.startTime < 1000 &&\n                p.startTime - firstSessionEntry.startTime < 5000) {\n                sessionValue += p.value;\n                sessionEntries.push(p);\n            } else {\n                sessionValue = p.value;\n                sessionEntries = [p];\n            }\n            if (sessionValue > clsValue) {\n                clsValue = sessionValue;\n                clsEntries = sessionEntries;\n                RData.CLS = clsValue;\n                LogConsole(RData.CLS,\"CLS\");\n            }\n        }\n    }\n}\n\n//获取性能指标\nexport const execPerformance = () => {\n    performObserverList[0] = observeHandle(ObserveType.PAINT, paintCallback);\n    performObserverList[1] = observeHandle(ObserveType.FIRST_INPUT, firstInputCallback);\n    performObserverList[2] = observeHandle(ObserveType.LARGEST_CONTENTFUL_PAINT, lastContentfulPaintCallback);\n    if (store.isResourceTiming) {\n        observeHandle(ObserveType.RESOURCE, resourceCallback);\n    }\n    performObserverList[3] = observeHandle(ObserveType.LAYOUT_SHIFT, layoutshiftCallback);\n}\n\nexport const removeObserver = () => {\n    if (performObserverList[2]) {\n        // LogConsole(0, \"LCPFINAL\");\n        disObserveHandle(2);\n    }\n    if (performObserverList[3]) {\n        // LogConsole(0, \"CLSFINAL\");\n        disObserveHandle(3);\n    }\n    if (performObserverList[4]) {\n        // LogConsole(0, \"TBTFINAL\");\n        disObserveHandle(4);\n    }\n}","import { PerformanceConfig } from \"../types/index\";\nimport { validateOptions, isPerformanceSupporte, isPerformanceObserverSupporte, getNavigationTiming, getNetworkInformation } from '../tools/index';\nimport ErrorTrack from './ErrorTrack';\nimport { execPerformance, removeObserver } from './performance';\nimport { D, visible } from \"../constant\";\n\nclass Corazon {\n    private v = '1.0.0';\n    constructor(options: PerformanceConfig) {\n        validateOptions(options);\n        if (options.captureError) {\n            const errorTrack = new ErrorTrack();\n            errorTrack && errorTrack.run();\n        }\n        /** 不支持性能监控API 或 不监控 */\n        if (!isPerformanceSupporte() || !options.isPerformance) {\n            return;\n        }\n        /** observe的指标 */\n        if (isPerformanceObserverSupporte()) {\n            execPerformance();\n        }\n        /** 标签页隐藏注销监听 */\n        if (typeof D.hidden !== undefined) {\n            D.addEventListener('visibilitychange', () => {\n                if (D.hidden) {\n                    removeObserver();\n                    visible.isHidden = D.hidden;\n                }\n            })\n        }\n        /** 获取 navigation指标 */\n        getNavigationTiming();\n        /** 获取 网络信息 */\n        getNetworkInformation();\n    }\n}\n\nexport default Corazon;\n"],"names":["Priority","ObserveType","W","window","D","document","WP","performance","WN","navigator","store","reportData","isResourceTiming","captureError","isPerformance","visible","isHidden","RData","FP","FCP","FID","LCP","CLS","TBT","RD","Object","create","ReportData","url","reportUrl","Error","this","sendToAnalytics","level","body","URGENT","fetch","method","keepalive","reason","xhr","XMLHttpRequest","open","setRequestHeader","send","onerror","e","IDLE","sendBeacon","img","Image","src","onload","isPerformanceSupporte","getEntriesByType","now","mark","useIdleHandle","fn","Reflect","has","requestIdleCallback","timeout","LogConsole","duration","measureName","customProperties","parseFloat","toFixed","endsWith","analyticsTracker","data","navigatorInformation","getNavigatorInfo","vitalsScore","getVitalsScore","LogObjectData","getDM","deviceMemory","getHC","hardwareConcurrency","isLowEndDevice","isLowEndExperience","net","connection","_WN$connection","effectiveType","fcpScore","webVitalsScore","TBT5S","value","ErrorTrack","addEventListener","globalError","message","source","lineno","colno","error","JSON","stringify","networkError","target","ele","tag","tagName","promiseError","run","performObserverList","observeHandle","eventType","callback","perforObserver","PerformanceObserver","entryList","getEntries","observe","type","buffered","disObserveHandle","index","disconnect","deleteProperty","paintCallback","performanceEntries","forEach","p","name","FIRST_PAINT","startTime","FIRST_CONTENTFUL_PAINT","LONGTASK","longTastCallback","tbt","firstInputCallback","performanceEventTiming","last","pop","processingStart","setTimeout","lastContentfulPaintCallback","entry","renderTime","resourceCallback","performanceResources","map","Map","total","r","initiatorType","n","get","set","decodedBodySize","once","key","clsValue","sessionValue","sessionEntries","layoutshiftCallback","hadRecentInput","length","push","Corazon","options","v","logUrl","console","log","validateOptions","errorTrack","PAINT","FIRST_INPUT","LARGEST_CONTENTFUL_PAINT","RESOURCE","LAYOUT_SHIFT","undefined","hidden","pnt","requestTotalTime","responseEnd","requestStart","downloadTime","responseStart","timeToFirstByte","dnsLookupTime","domainLookupEnd","domainLookupStart","tcpTime","connectEnd","connectStart","domTime","domContentLoadedEventEnd","domContentLoadedEventStart","loadTime","loadEventEnd","parseDOMTime","domComplete","domInteractive","readyState","rtt","saveData","downlink","getNetworkInformation"],"mappings":"IAwBYA,EAeAC,GAfZ,SAAYD,GACRA,uBACAA,mBAFJ,CAAYA,IAAAA,OAeZ,SAAYC,GACRA,gBACAA,4BACAA,sDACAA,sBACAA,sBACAA,8BACAA,oBAEAA,4BACAA,kDAVJ,CAAYA,IAAAA,WCrCCC,EAAIC,OACJC,EAAIC,SACJC,EAAKH,OAAOI,YACZC,EAAKL,OAAOM,UAGZC,EAA0B,CACnCC,WAAY,KACZC,kBAAkB,EAClBC,cAAc,EACdC,eAAe,GAINC,EAAU,CACnBC,UAAU,GAIDC,EAAQ,CACjBC,GAAI,EACJC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAI,EACJC,GAAIC,OAAOC,OAAO,OCzBhBC,aAEF,WAAYC,GACR,QAFIC,kBAECD,EACD,UAAUE,MAAM,YAEpBC,KAAKF,UAAYD,qBAGrBI,gBAAA,SAAgBC,EAAiBC,GAC7B,GAAID,IAAUjC,EAASmC,OACnB,GAAMC,MACFA,MAAML,KAAKF,UAAW,CAAEK,KAAAA,EAAMG,OAAQ,OAAQC,WAAW,UAAc,SAAAC,UAGpE,CACH,IAAIC,EAA6B,IAAIC,eACrCD,EAAIE,KAAK,OAAQX,KAAKF,WAAW,GACjCW,EAAIG,iBAAiB,eAAgB,oBACrCH,EAAII,KAAKV,GACTM,EAAIK,QAAU,SAAUC,KAGxBN,EAAM,aAEHP,IAAUjC,EAAS+C,KAC1B,GAAMvC,EAAGwC,WACLxC,EAAGwC,WAAWjB,KAAKF,UAAWK,OAC3B,CACH,IAAIe,EAA+B,IAAIC,MACvCD,EAAIE,IAASpB,KAAKF,mBAAkBK,EACpCe,EAAIG,OAAS,WACTH,EAAM,MAEVA,EAAIJ,QAAU,SAAUC,YCR3BO,EAAwB,WACjC,OAAO/C,KAAQA,EAAGgD,oBAAsBhD,EAAGiD,OAASjD,EAAGkD,MAWrDC,EAAgB,SAACC,GACfxD,GAAKyD,QAAQC,IAAI1D,EAAG,uBACpB2D,oBAAoBH,EAAI,CAAEI,QAAS,MAEnCJ,KASKK,EAAa,SAACC,EAAkBC,EAAqBC,IAC9DF,EAAWG,WAAWH,EAASI,QAAQ,MACvB,GACZX,EAAc,WACN1C,EAAQC,WAAaiD,EAAYI,SAAS,WAAa3D,EAAM4D,kBAGjE5D,EAAM4D,iBAAiB,CAAEL,YAAAA,EAAaM,KAAMP,EAAUQ,qBAAsBC,IAAoBC,YAAaC,EAAeV,EAAaD,QAKxIY,EAAgB,SAACX,EAAqBC,GAC/CT,EAAc,WACN1C,EAAQC,WAAaiD,EAAYI,SAAS,WAAa3D,EAAM4D,kBAGjE5D,EAAM4D,iBAAiB,CAAEL,YAAAA,EAAaM,KAAML,EAAkBM,qBAAsBC,IAAoBC,YAAa,UAOvHG,EAAQ,uCAAOrE,SAAAA,EAAYsE,gBAAgB,GAI3CC,EAAQ,uCAAOvE,SAAAA,EAAYwE,uBAAuB,GAuBlDP,EAAmB,WACrB,OAAIjE,EACO,CACHsE,aAAcC,IACdC,oBAAqBH,IACrBI,kBAtBJF,KAAWA,IAAU,OAGrBF,KAAWA,IAAU,GAoBjBK,oBAVJC,EAAM3E,UAAOA,YAAAA,EAAY4E,mBAAZC,EAAwBC,iBAClCH,GAAc,OAARA,IAYN,GAdmB,MACtBA,GAiBFI,EAAW,CAAC,IAAM,MAMlBC,EAA2C,CAC7CtE,GAAIqE,EACJpE,IAAKoE,EACLlE,IARa,CAAC,KAAM,KASpBD,IARY,CAAC,IAAK,KASlBE,IARa,CAAC,GAAK,KASnBmE,MARa,CAAC,IAAK,MAWjBd,EAAiB,SAACV,EAAqByB,GACzC,OAAKF,EAAevB,GAGhByB,GAASF,EAAevB,GAAa,GAC9B,OAEJyB,GAASF,EAAevB,GAAa,GAAK,OAAS,yBCxIxD0B,aACF,aAEI,IAAKzF,IAAMA,EAAE0F,iBACT,UAAU9D,MAAM,uCAIhB+D,YAAA,WACJ3F,EAAE2C,QAAU,SAAUiD,EAAyBC,EAAiBC,EAAiBC,EAAgBC,SACzFhE,EAAOiE,KAAKC,UAAU,CAAEN,QAAAA,EAASC,OAAAA,EAAQC,OAAAA,EAAQC,MAAAA,IAErD,gBADAvF,EAAMC,eAAYqB,gBAAgBhC,EAAS+C,KAAMb,UAKjDmE,aAAA,WACJnG,EAAE0F,iBAAiB,QAAS,SAAU9C,SAClC,GAAKA,EAAEwD,SAAmBpG,EAA1B,CAGA,IAAIqG,EAAOzD,EAAEwD,OACTpE,EAAOiE,KAAKC,UAAU,CAAExE,IAAK2E,EAAIpD,IAAKqD,IAAKD,EAAIE,QAASX,QAAS,oBACrEpF,EAAMC,eAAYqB,gBAAgBhC,EAAS+C,KAAMb,MAClD,MAGCwE,aAAA,WACJxG,EAAE0F,iBAAiB,qBAAsB,SAAU9C,SAC3CZ,EAAOiE,KAAKC,UAAU,CAAEN,QAAShD,EAAEP,kBACvC7B,EAAMC,eAAYqB,gBAAgBhC,EAAS+C,KAAMb,QAIzDyE,IAAA,WACI5E,KAAK8D,cACL9D,KAAKsE,eACLtE,KAAK2E,+0BCpCAE,EAAsBnF,OAAOC,OAAO,MAE3CmF,EAAgB,SAACC,EAAqCC,GACxD,IACI,IAAMC,EAAiB,IAAIC,oBAAoB,SAACC,GAC5CH,EAASG,EAAUC,gBAIvB,OADAH,EAAeI,QAAQ,CAAEC,KAAMP,EAAWQ,UAAU,IAC7CN,EACT,MAAOlE,GAEL,OAAOA,IAITyE,EAAmB,SAACC,GAClBZ,EAAoBY,IACpBZ,EAAoBY,GAAOC,aAE/B9D,QAAQ+D,eAAed,EAAqBY,IAG1CG,EAAgB,SAACC,GACnBA,EAAmBC,QAAQ,SAACC,GACpBA,EAAEC,OAAS9H,EAAY+H,aACvBjE,EAAW+D,EAAEG,UAAW,MACxBhH,EAAMC,GAAK4G,EAAEG,WACNH,EAAEC,OAAS9H,EAAYiI,yBAC9BnE,EAAW+D,EAAEG,UAAW,OACxBhH,EAAME,IAAM2G,EAAEG,UAEdpB,EAAc5G,EAAYkI,SAAUC,GACpCb,EAAiB,OAKvBa,EAAmB,SAACR,GACtBA,EAAmBC,QAAQ,SAAAC,GAEvB,KAAe,SAAXA,EAAEC,MAAmBD,EAAEG,UAAYhH,EAAME,KAA7C,CAGA,IAAIkH,EAAMP,EAAE9D,SAAW,GACnBqE,IACApH,EAAMM,KAAO8G,OAKnBC,EAAqB,SAACC,GACxB,IAAIC,EAAOD,EAAuBE,MAC9BD,IACAzE,EAAWyE,EAAKE,gBAAkBF,EAAKP,UAAW,OAClDhH,EAAMG,IAAMoH,EAAKE,gBAAkBF,EAAKP,WAE5CV,EAAiB,GAEjBtG,EAAMM,IAAM,EACZoH,WAAW,WACP5E,EAAW9C,EAAMM,IAAK,UACvB,MAGDqH,EAA8B,SAAC1B,GACjC,IAAI2B,EAAQ3B,EAAUuB,MAClBI,IACA5H,EAAMI,IAAMwH,EAAMC,WAClB/E,EAAW8E,EAAMC,WAAY,SAI/BC,EAAmB,SAACC,GACtB,IAAIC,EAAM,IAAIC,IACVC,EAAQlI,EAAMO,GAClBwH,EAAqBnB,QAAQ,SAAAuB,GAEzB,GADAD,EAAMC,EAAErB,MAAQqB,EACZH,EAAIrF,IAAIwF,EAAEC,eAAgB,CAC1B,IAAIC,EAAIL,EAAIM,IAAIH,EAAEC,eAClBJ,EAAIO,IAAIJ,EAAEC,cAAeC,EAAIF,EAAEK,sBAE/BR,EAAIO,IAAIJ,EAAEC,cAAeD,EAAEK,mBAInC,IADA,MAAIC,EAAOjI,OAAOC,OAAO,UACAuH,kBAAK,eAApBU,OAAKjE,OACXyD,EAAMQ,GAAOjE,EACbgE,EAAKC,GAAOjE,EAEhBd,EAAc,WAAY8E,IAG1BE,EAAW,EAEXC,EAAe,EACfC,EAA0C,GACxCC,EAAsB,SAACnC,GACzB,cAAcA,kBAAoB,KAAzBE,UACAA,EAAEkC,iBAGCH,GACA/B,EAAEG,UAFmB6B,EAAeA,EAAeG,OAAS,GAE7BhC,UAAY,KAC3CH,EAAEG,UAJoB6B,EAAe,GAIL7B,UAAY,KAC5C4B,GAAgB/B,EAAEpC,MAClBoE,EAAeI,KAAKpC,KAEpB+B,EAAe/B,EAAEpC,MACjBoE,EAAiB,CAAChC,IAElB+B,EAAeD,IAGf3I,EAAMK,IAFNsI,EAAWC,EAGX9F,EAAW9C,EAAMK,IAAI,WClH/B6I,EAEF,SAAYC,GAER,QAHIC,EAAI,QHHe,SAACD,GAC5B,IAAKA,EAAQE,OACT,UAAUxI,MAAM,WAKpB,GAFApB,EAAMC,WAAa,IAAIgB,EAAWyI,EAAQE,QAEtCF,EAAQ9F,kBAAwD,mBAA7B8F,EAAQ9F,iBAC3C,UAAUxC,MAAM,UAShBpB,EAAM4D,iBANL8F,EAAQ9F,iBAMgB8F,EAAQ9F,iBAJR,SAAU8F,GAC/BG,QAAQC,IAAIJ,IAMpB1J,EAAME,iBAAmBwJ,EAAQxJ,mBAAoB,EACrDF,EAAME,iBAAmBwJ,EAAQtJ,gBAAiB,EAClDJ,EAAMG,aAAeuJ,EAAQvJ,eAAgB,EGjBzC4J,CAAgBL,GACZA,EAAQvJ,aAAc,CACtB,IAAM6J,EAAa,IAAI/E,EACvB+E,GAAcA,EAAW/D,MH2IF,IARhBI,EGhIN1D,KAA4B+G,EAAQtJ,gBHoBtCZ,GAAOA,EAAE+G,sBE6FhBL,EAAoB,GAAKC,EAAc5G,EAAY0K,MAAOhD,GAC1Df,EAAoB,GAAKC,EAAc5G,EAAY2K,YAAatC,GAChE1B,EAAoB,GAAKC,EAAc5G,EAAY4K,yBAA0BjC,GACzElI,EAAME,kBACNiG,EAAc5G,EAAY6K,SAAU/B,GAExCnC,EAAoB,GAAKC,EAAc5G,EAAY8K,aAAchB,SC/GrCiB,WAAb5K,EAAE6K,QACT7K,EAAEwF,iBAAiB,mBAAoB,WAC/BxF,EAAE6K,SDiHdrE,EAAoB,IAEpBW,EAAiB,GAEjBX,EAAoB,IAEpBW,EAAiB,GAEjBX,EAAoB,IAEpBW,EAAiB,GCzHLxG,EAAQC,SAAWZ,EAAE6K,UH6HhC5H,MATU0D,EAaL,WACN,IAAImE,EAAM5K,EAAGgD,iBAAiB,cAAc,GACvC4H,GAaLtG,EAAc,eAVH,CACPuG,iBAAkBD,EAAIE,YAAcF,EAAIG,aACxCC,aAAcJ,EAAIE,YAAcF,EAAIK,cACpCC,gBAAiBN,EAAIK,cAAgBL,EAAIjD,WAAa,EACtDwD,cAAeP,EAAIQ,gBAAkBR,EAAIS,kBACzCC,QAASV,EAAIW,WAAaX,EAAIY,aAC9BC,QAASb,EAAIc,yBAA2Bd,EAAIe,2BAC5CC,SAAUhB,EAAIiB,aAAejB,EAAIjD,WAAa,EAC9CmE,aAAclB,EAAImB,YAAcnB,EAAIoB,gBAAkB,KAzBlC,aAAxBjM,SAASkM,WACT5D,WAAW5B,EAAU,GAErBnB,iBAAiB,WAAYmB,IA4BA,WACjC,GAAIvG,GAAMmD,QAAQC,IAAIpD,EAAI,cAAe,CACrC,MAAkDA,EAAU,WAC5DoE,EAAc,OAAQ,CAAEU,gBADlBA,cACiCkH,MADlBA,IACuBC,WADlBA,SAC4BC,WADlBA,YG/IpCC"}